[{"title":"系统中图片上传设计方案","url":"http://yoursite.com/2017/05/30/系统中图片上传设计方案/","content":"<p>曾做过一些系统，对于图片上传的相关设计有些疑惑，经过后续的各方面研究，现有了能去除心中困惑的解决方案。</p>\n<p>#####先说说以前做系统时遇到的设计问题：</p>\n<p>有业务对象A，A中有各种属性，这其中包括附加图片的属性，而A可以关联多张图片。当要新增一个对象A时，怎么保存这些图片信息呢？</p>\n<p>#####当初想到了两个方案：</p>\n<p>①在点击保存时，将对象A的全部属性上传，这包括所有图片,然后在后台将所有图片整理后，将对应地址赋值给对象A，最后保存对象A。</p>\n<p>②每选择一张图片时，会先上传到服务器，然后返回相关图片地址给前端页面对象，当点击保存时，页面传递的就是对象A所有的属性，此时关联的是图片在服务器的地址，此步骤并没有上传图片。</p>\n<p>#####对于这两种种保存，可能会有失败情况，怎么解决数据的一致性问题？</p>\n<p>对于①由于不可能使用事务来确保数据的一致，那么只能使用try catch ,在抛出异常时，进行手动删除相关的图片。对于②同理，在保存对象失败时，根据上传的图片地址进行删除相关数据，但其实还是不能做到100%的确保，比如中途断电情况，这些情况是忽略的，我们能做到的就是尽最大可能做到数据的一致性。</p>\n<p>#####孰优孰劣</p>\n<p>其实都不优，两种方案处理数据一致性这个问题上并不好，而且①这种方案可能会存在并发问题。so…我想到了 定时任务 这种方案能解决数据一致性问题。最终方案是在②的基础上增加定时任务，但怎么设计呢？请听吾慢慢分解：</p>\n<p>①首先是数据库表的设计：图片对应的表，这里叫image表吧，这个表除了记录图片的一些基本信息，还要增加一个过期时间的字段expired_time，用来记录图片过期的时间。</p>\n<p>②在新增一个业务对象A时，每选择一张图片,都会先上传到服务器，然后返回关联的图片对象信息（可以是保存的此条image记录,用于显示到页面，在保存业务对象A时，保存与图片的关联关系）。此过程会保存图片相关基本信息，对于expired_time这个字段的值为当前时间（new Date()）。</p>\n<p>③在业务对象A保存成功后，注意：需要更新关联的image记录 ，将expired_time设置为空。这两个动作使用事务，若保存失败，则expired_time不为空。</p>\n<p>④下面就是开始定时任务了，定时任务在凌晨将过期时间不为空的记录清空，同时删除上传的文件。</p>\n<p>到这，以上方案基本很好地解决了图片上传的一些相关问题。enjoy it !</p>\n"},{"title":"redis HA 之 Redis-Sentinel","url":"http://yoursite.com/2017/05/01/redis_ha_sentinel/","content":"<p>#######<br>上次测试redis的HA方案是采用了Redis-Cluster（集群）的方式。然那一套方案比较适合大数据量的应用架构，对于实际中那种非大数据量的应用架构有点大炮打蚊子的赶脚。所以这次采用另一种HA方案，比较适合那种小型应用架构，那就是Redis-Sentinel(哨兵).具体请翻阅<a href=\"https://redis.io/topics/sentinel\" title=\"Redis Sentinel Documentation\" target=\"_blank\" rel=\"external\">Redis Sentinel Documentation</a></p>\n<p>######## 环境<br>centos 6</p>\n<p>192.168.48.130：7000 Master</p>\n<p>192.168.48.130：7001 Slave</p>\n<p>192.168.48.130：26379 Sentinel_1</p>\n<p>192.168.48.130：26380 Sentinel_2</p>\n<p>192.168.48.130：26381 Sentinel_3</p>\n<p>######## 步骤<br>实际中应该是将Master,Slave,Sentinel_1,Sentinel_2,Sentinel_3安装在不同的机器上，由于我的机器配置不高，跑不起这么多个vm,所以将以上全部安装在一台机器中(配置不同的启动文件即可)作测试使用。</p>\n<p>①将redis安装，略（上一篇文件涉及）</p>\n<p>②在/usr/local/下建立以下文件</p>\n<p>redis-sentinel/master</p>\n<p>redis-sentinel/slave</p>\n<p>redis-sentinel/sentinel_1</p>\n<p>redis-sentinel/sentinel_2</p>\n<p>redis-sentinel/sentinel_3</p>\n<p>③将redis安装目录中的redis.conf移动到以上文件master,salve目录下并进行修改。<br>master中的redis.conf可使用默认（本人的修改了端口及数据储存目录）<br>slave中的redis.conf要配置slaveof 实现备份 </p>\n<pre><code>`在配置文件 #slaveof &lt;masterip&gt; &lt;masterport&gt;下面指定master ip及端口`\n`slaveof 192.168.48.130 7000`\n</code></pre><p>④分别启动master，slave<br>    <code>redis-server /usr/local/redis-sentinel/master(or slave)/redis.conf</code><br>查看master及slave的启动状态：</p>\n<p>⑤将redis安装目录下的sentinel.conf分别复制到上面新的sentinel_1，sentinel_2，sentinel_3目录，并修改。主要修改以下指定监控的master,同时指定一个日志目录,注意由于在同一台机器，此配置文件中port及dir要修改成不同的，其它的一样。</p>\n<pre><code>`sentinel monitor mymaster 192.168.48.130 7000`\n\n`daemonize yes `\n#目录需存在\n`logfile &quot;/usr/local/redis-sentinel/sentinel_1/log/sentinel.log&quot;`\n</code></pre><p>⑥启动sentinel,查看日志</p>\n<p><img src=\"http://thumbnail0.baidupcs.com/thumbnail/c3fdeecb13a58a51f93240f1d464b436?fid=2687665673-250528-786768579277898&amp;time=1493647200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-C4f%2FJfRlcp6qsrQJfxJkseWV%2FGA%3D&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=2804445179044663000&amp;dp-callid=0&amp;size=c710_u400&amp;quality=100\" alt=\"\"></p>\n<p>⑦测试主从故障转移</p>\n<p><img src=\"http://thumbnail0.baidupcs.com/thumbnail/f9d943945f081357a189e2539d00d85a?fid=2687665673-250528-1119144124034768&amp;time=1493647200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-uBnhRTEXvLjdb9QQKGjz1QRS%2BaQ%3D&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=2804460159988792952&amp;dp-callid=0&amp;size=c710_u400&amp;quality=100\" alt=\"\"></p>\n<p><img src=\"http://thumbnail0.baidupcs.com/thumbnail/ecdb82df704ab828ce89ed4ecfc206f9?fid=2687665673-250528-475129305081670&amp;time=1493647200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-JbhK5ctYQ3V7%2BJvtOhN30h6ZhQs%3D&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=2804466635971649144&amp;dp-callid=0&amp;size=c710_u400&amp;quality=100\" alt=\"\"></p>\n<p><img src=\"http://thumbnail0.baidupcs.com/thumbnail/4ea9628cafa8582b0d193fdb5a6556d6?fid=2687665673-250528-869579725136665&amp;time=1493647200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-zxQTVCXEQ%2FC7K0e%2F3ejLSoPHf1k%3D&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=2804471825594946358&amp;dp-callid=0&amp;size=c710_u400&amp;quality=100\" alt=\"\"></p>\n<p><img src=\"http://thumbnail0.baidupcs.com/thumbnail/6c149edef54f492bbb054066cb32b10f?fid=2687665673-250528-723234143949091&amp;time=1493647200&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-6aKQ2UEbLpkNDhBKkN47pp5Kk4g%3D&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=2804487243995984037&amp;dp-callid=0&amp;size=c710_u400&amp;quality=100\" alt=\"\"></p>\n<p>######备注：</p>\n<p>redis.conf中若有配置<br>protected-mode yes<br>bind 192.168.48.130</p>\n<p>则sentinel.conf中也须要配置上<br>protected-mode yes<br>bind 192.168.48.130</p>\n<p>这个坑让我搞了几个小时，一直不能故障转移。。。</p>\n<h5 id=\"只有我们独立自主的思索，才真正具有真理与生命——叔本华\"><a href=\"#只有我们独立自主的思索，才真正具有真理与生命——叔本华\" class=\"headerlink\" title=\"只有我们独立自主的思索，才真正具有真理与生命——叔本华\"></a>只有我们独立自主的思索，才真正具有真理与生命——叔本华</h5><p> 22:12 sz</p>\n"},{"title":"redis 高可用（HA）集群方案","url":"http://yoursite.com/2017/04/24/redis_ha/","content":"<p>#######<br>redis的高可用方案，3.0之前使用哨兵模式，但当主机挂机，进行主从切换时，会有1到2秒数据的丢失。</p>\n<p>解决方法：当抛出cluster is down时，在 catch中（若要延迟则设置睡眠时间）再执行一次try中的操作，这可让从机成功接替主机后再进行这1到2秒内进行的数据处理，达到数据不丢失。</p>\n<p>这并不是最优的方法。然而，3.0后的集群。可解决上面数据丢失问题</p>\n<p>下面先进行集群的搭建。</p>\n<p>集群搭建方案：</p>\n<p>在3台centos虚拟机上分别安装一主一从的redis，并实现集群功能（集群至少3个主节点，3个从节点）。</p>\n<p>安装redis过程：</p>\n<p>下载redis.</p>\n<p>解压到/usr/local  :   tar -zxvf redis-3.2.8 -C /usr/local</p>\n<p>进行解压后redis目录redis-3.2.8 编译：make </p>\n<p>进入redis-3.2.8/src安装：make install</p>\n<p>(centos系统编译需要安装 gcc tcl)</p>\n<p>建立cluster文件夹：mkdir -p /usr/local/redis-cluster</p>\n<p>在cluster中建立2个目录 8001(备注：放置主机)  8002(备注：放置从机)</p>\n<p>将redis-conf分别copy到这两个文件中，并进行修改 需要修改如下：</p>\n<p>1，修改 绑定本机IP</p>\n<p>bind 192.168.48.130</p>\n<p>2 修改 端口号</p>\n<p>port 8001</p>\n<p>3 修改 指定数据存放目录</p>\n<p>dir /usr/local/redis-cluster/8001/</p>\n<p>4 修改 开启 aof</p>\n<p>appendonly yes</p>\n<p>5 修改 开启集群</p>\n<p> cluster-enabled yes</p>\n<p>6 修改 节点配置名称</p>\n<p> cluster-config-file nodes-8001.conf</p>\n<p>7 修改 timeout</p>\n<p> cluster-node-timeout 15000</p>\n<p>#####安装启动集群脚本<br><code>yum install ruby</code></p>\n<p><code>yum install rubygems</code></p>\n<p><code>gem install redis</code></p>\n<p>将以上安装操作重复，安装在三台不同的虚拟机上。</p>\n<p>#####最后启动集群操作（在其中一台虚拟机上启动即可）：</p>\n<pre><code>`cd /usr/local/redis-3.2.8/src`\n\n`./redis-trib.rb create --replicas 1 192.168.48.133:8001 192.168.48.132:8001 192.168.48.130:8001 192.168.48.133:8002 192.168.48.132:8002 192.168.48.130:8002`\n</code></pre><p><img src=\"https://static.oschina.net/uploads/space/2017/0423/234336_c1D0_1448523.png\" alt=\"\"></p>\n<p>#####说明：<br>–replicas后面的 1 ，这个数字指主从比例 ，3主3从所以为1，后面跟着的host，按顺序  前三台为主，后三台为从，第一台主对应第四台从。</p>\n<p>#####简单测试：<br><img src=\"https://static.oschina.net/uploads/space/2017/0424/000140_PhFW_1448523.png\" alt=\"\"></p>\n<p><img src=\"https://static.oschina.net/uploads/space/2017/0424/000158_UEWl_1448523.png\" alt=\"\"></p>\n<p>######哨兵模式的主从数据是一样的，而集群模式数据是分布在不同机器不同的slot上。</p>\n"},{"title":"redis 条件查询","url":"http://yoursite.com/2017/04/17/redis_select/","content":"<p>####### 问题<br>假设有一user表存放在redis中，现要对这张user表进行条件查询，该怎么做？</p>\n<p>由于redis这类非关系型数据库是无法进行 select * from x where …..等操作的。</p>\n<p>那么该怎么实现这种查询需求呢？</p>\n<p>######## 方法一<br>在redis中取出所有user进行遍历，将符合条件的进行筛选，最后得到结果。</p>\n<p>但感觉这种处理方法过于烦琐，数据量过大时性能可能会有影响，所以这并不是最优的方法。</p>\n<p>######## 方法二<br>在将user表中的数据存储到redis时，进行业务数据划分。</p>\n<p>假如要将性别进行划分，方便查询不同性别用户。例如用户为男的key为：<strong>USER_GENDER_M</strong>，女key的为：<strong>USER_GENDER_F</strong>。在将user数据存储到redis时，同时增加以下一步操作将男与女的userId分别add到不同的key中。</p>\n<p>若user是男的则</p>\n<pre><code>`Jedis.sadd(USER_GENDER_M,userId)`\n</code></pre><p>是女的则进行：</p>\n<p><code>Jedis.sadd(USER_GENDER_F,userId)</code></p>\n<p>通过以下查询就可以得到所有男性用户的userId：</p>\n<p><code>Jedis.smembers(USER_GENDER_M)</code></p>\n<p>最后通过以下查询就可以得到所有男性用户数据：</p>\n<pre><code>`Jedis.hmget(USER,user1Id,user2Id...)`\n</code></pre><p>若是有其它条件，也如此设计查询业务，例如某年龄阶段的，某区域的等等的用户。</p>\n<p>当查询的条件为：男性用户且年龄为20-30时，则先通过得到男性用户的id，然后得到年龄到20-30之间的用户id，最后通过取两者的交集(Jedis.sinter)就可得到符合这一条件的用户id，进而得到所要数据。</p>\n<p>若是or条件则取并集就行。</p>\n<p>#######小结</p>\n<p>到这，你会发现这些方法都是比较麻烦或无法达到要求的，这是由于这些非关系型数据库本身的设计所决定的，非关系型数据库并不适合各种条件或强关联查询。所以进行强关系条件查询的还是使用关系型数据库进行操作。</p>\n"},{"title":"ubuntu安装mysql环境(离线压缩包方式)","url":"http://yoursite.com/2016/10/31/ubuntu安装mysql环境-离线压缩包方式/","content":"<p>#######1,下载mysql<br>Ubuntu 14.04 安装 64位的 MySQL 5.7.9<br>到官网 <a href=\"http://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"external\">http://dev.mysql.com/downloads/mysql/</a> 下载<br>Ubuntu Linux 14.04 (x86, 64-bit), DEB Bundle<br>(文件名： mysql-server_5.7.9-1ubuntu14.04_amd64.deb-bundle.tar)</p>\n<p>#######2,放在 /home/soft/ 下解压：</p>\n<pre><code>cd /home/soft/\nsudo chmod +x mysql-server_5.7.9-1ubuntu14.04_amd64.deb-bundle.tar\ntar -zxvf mysql-server_5.7.9-1ubuntu14.04_amd64.deb-bundle.tar\n</code></pre><p>#######3,解压出以下文件：</p>\n<p>libmysqlclient20_5.7.9-1ubuntu14.04_amd64.deb</p>\n<p>libmysqlclient-dev_5.7.9-1ubuntu14.04_amd64.deb</p>\n<p>libmysqld-dev_5.7.9-1ubuntu14.04_amd64.deb  </p>\n<p>mysql-community-client_5.7.9-1ubuntu14.04_amd64.deb</p>\n<p>mysql-community-server_5.7.9-1ubuntu14.04_amd64.deb      </p>\n<p>mysql-community-source_5.7.9-1ubuntu14.04_amd64.deb</p>\n<p>mysql-client_5.7.9-1ubuntu14.04_amd64.deb         </p>\n<p>mysql-community-test_5.7.9-1ubuntu14.04_amd64.deb</p>\n<p>mysql-common_5.7.9-1ubuntu14.04_amd64.deb         </p>\n<p>mysql-server_5.7.9-1ubuntu14.04_amd64.deb</p>\n<p>mysql-community_5.7.9-1ubuntu14.04_amd64.changes  </p>\n<p>mysql-testsuite_5.7.9-1ubuntu14.04_amd64.deb</p>\n<p>#######4,更新设置到最新系统：<br>    sudo apt-get update<br>    sudo apt-get upgrade<br>    apt-get install libaio1</p>\n<p>#######5,然后分别安装以下的包：<br>    sudo dpkg -i mysql-common_5.7.9-1ubuntu14.04_amd64.deb<br>    sudo dpkg-preconfigure mysql-community-server_5.7.9-1ubuntu14.04_amd64.deb<br>此步需要输入数据的root密码</p>\n<pre><code>sudo dpkg -i libmysqlclient20_5.7.9-1ubuntu14.04_amd64.deb\nsudo dpkg -i libmysqlclient-dev_5.7.9-1ubuntu14.04_amd64.deb\nsudo dpkg -i libmysqld-dev_5.7.9-1ubuntu14.04_amd64.deb\nsudo dpkg -i mysql-client_5.7.9-1ubuntu14.04_amd64.deb\nsudo dpkg -i mysql-community-client_5.7.9-1ubuntu14.04_amd64.deb\nsudo dpkg -i mysql-common_5.7.9-1ubuntu14.04_amd64.deb\n\nsudo apt-get -f install\n</code></pre><p>#######6,此步为了安装依赖包 libmecab2</p>\n<pre><code>sudo dpkg -i mysql-community-server_5.7.9-1ubuntu14.04_amd64.deb\nsudo dpkg -i mysql-server_5.7.9-1ubuntu14.04_amd64.deb\n</code></pre><p>#######7,这时数据安装完成，并自动启动</p>\n<p>#######8,查看mysql安装的路径和依赖：</p>\n<pre><code>whereis mysql\n\nmysql: /usr/bin/mysql /etc/mysql /usr/lib/mysql /usr/include/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz\n</code></pre><p>这时你会发现 mysql以服务形式自启动</p>\n<p>######麻烦吗，不麻烦还玩个啥！</p>\n"},{"title":"first commit","url":"http://yoursite.com/2016/10/24/first commit/","content":"<p>committed ,pls wait … 请静候…</p>\n"},{"title":"about","url":"http://yoursite.com/about/index.html","content":""},{"title":"link","url":"http://yoursite.com/link/index.html","content":""},{"title":"search","url":"http://yoursite.com/search/index.html","content":""},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":""},{"title":"category","url":"http://yoursite.com/category/index.html","content":""},{"title":"first commit","url":"http://yoursite.com/first-commit/index.html","content":""},{"title":"project","url":"http://yoursite.com/project/index.html","content":""}]